   1              	# 1 "../init.asm"
   1              	.global start
   0              	
   0              	
   0              	
   2              	
   3              	.global _ISR_STARTADDRESS
   4              	
   5              	.global DoUndef
   6              	.global DoSWI
   7              	.global DoDabort
   8              	
   9              	.global screen
  10              	
  11              	.extern main
  12              	.extern ISR_Undef
  13              	.extern ISR_SWI
  14              	.extern ISR_FIQ
  15              	.extern ISR_Pabort
  16              	.extern ISR_Dabort 
  17              	.extern DoDetecta
  18              	
  19              	.equ 	_ISR_STARTADDRESS,	0xc7fff00		/* GCS6:64M DRAM/SDRAM 	*/
  20              	.equ    UserStack,   _ISR_STARTADDRESS-0xf00         /* c7ff000 */
  21              	.equ    SVCStack,    _ISR_STARTADDRESS-0xf00+256     /* c7ff100 */
  22              	.equ    UndefStack,  _ISR_STARTADDRESS-0xf00+256*2   /* c7ff200 */
  23              	.equ    AbortStack,  _ISR_STARTADDRESS-0xf00+256*3   /* c7ff300 */
  24              	.equ    IRQStack,    _ISR_STARTADDRESS-0xf00+256*4   /* c7ff400 */
  25              	.equ    FIQStack,    _ISR_STARTADDRESS-0xf00+256*5   /* c7ff500 */
  26              	
  27              	.equ    HandleReset,    _ISR_STARTADDRESS
  28              	.equ    HandleUndef,    _ISR_STARTADDRESS+4
  29              	.equ    HandleSWI,      _ISR_STARTADDRESS+4*2
  30              	.equ    HandlePabort,   _ISR_STARTADDRESS+4*3
  31              	.equ    HandleDabort,   _ISR_STARTADDRESS+4*4
  32              	.equ    HandleReserved, _ISR_STARTADDRESS+4*5
  33              	.equ    HandleIRQ,      _ISR_STARTADDRESS+4*6
  34              	.equ    HandleFIQ,      _ISR_STARTADDRESS+4*7
  35              	
  36              	/* Simbolos para facilitar la codificación
  37              	de los modos de ejecución */
  38              	.equ 	USERMODE,	0x10
  39              	.equ 	FIQMODE,	0x11
  40              	.equ 	IRQMODE,	0x12
  41              	.equ 	SVCMODE,	0x13
  42              	.equ 	ABORTMODE,	0x17
  43              	.equ 	UNDEFMODE,	0x1b
  44              	.equ 	MODEMASK,	0x1f
  45              	
  46              	.equ 	NOINT,		0xc0   /* Máscara para deshabilitar interrupciones */
  47              	.equ    IRQ_MODE,	0x40   /* deshabilitar interrupciones en modo IRQ  */
  48              	.equ    FIQ_MODE,	0x80   /* deshabilitar interrupciones en modo FIQ  */
  49              	
  50              	.equ I_ISPR, 0x1e00020
  51              	.equ EXTINTPND, 0x1d20054
  52              	
  53              	.text
  54              	
  55              	start:
  56              	    /* Si comenzamos con un reset
  57              	     el procesador esta en modo supervisor */
  58 0000 1F00C0E3 	    bic	r0,r0,#MODEMASK
  59 0004 131080E3 	    orr	r1,r0,#SVCMODE
  60 0008 01F02FE1 	    msr	cpsr_cxsf,r1 	    /* SVCMode */
  61              	    /* Si comenzamos con un reset el procesador esta en modo supervisor */
  62              	    /* Si comenzamos con un reset
  63              	     el procesador esta en modo supervisor.
  64              	     Tras InitStacks DEBEMOS seguir en modo supervisor*/
  65 000c 0B0000EB 	    bl InitStacks
  66              		
  67              	    /* Seguimos en modo supervisor, configuramos
  68              	       las direcciones de las rutinas de tratamiento
  69              	       de excepciones */
  70 0010 2D0000EB 	    bl InitISR
  71              	
  72              		@ activamos excepciones
  73 0014 00000FE1 		mrs r0,cpsr
  74 0018 C000C0E3 		bic r0,#NOINT
  75 001c 00F02FE1 		msr cpsr_cxsf,r0
  76              	
  77              	    /* Pasamos a MODO USUARIO, inicializamos su pila
  78              	      y ponemos a cero el frame pointer*/
  79 0020 00000FE1 	    mrs	r0,cpsr
  80 0024 1F00C0E3 	   	bic	r0,r0,#MODEMASK
  81 0028 101080E3 	    orr	r1,r0,#USERMODE
  82 002c 01F02FE1 	    msr	cpsr_cxsf,r1 	    /* SVCMode */
  83 0030 FCD49FE5 	    ldr sp,=UserStack
  84 0034 00B0A0E3 	    mov fp,#0
  85              	
  86              	    /* Saltamos a Main */
  87 0038 FEFFFFEB 	    bl main
  88 003c FEFFFFEA 		b .
  89              	InitStacks:
  90              	    /* Código de la primera parte */
  91              		/*TAREA 1a*/
  92              		/*El alumno/a debe realizar la inicializacion de los punteros de pila (registros SP) de los modos 
  93              		UndefMode,  AbortMode , IRQMode , FIQMode  y  SVCMode */
  94              		
  95              		//Comenzamos leyendo el registro de estado
  96 0040 00000FE1 		mrs	r0,cpsr
  97              	
  98              		//Inicializamos la pila del modo Undef
  99 0044 1F00C0E3 		bic	r0,r0, #MODEMASK
 100 0048 1B1080E3 		orr	r1,r0, #UNDEFMODE
 101 004c 01F02FE1 		msr	cpsr_cxsf, r1
 102 0050 E0D49FE5 		ldr	sp, =UndefStack
 103              	
 104              	    //Inicializamos la pila del modo Abort
 105 0054 1F00C0E3 		bic	r0,r0, #MODEMASK
 106 0058 171080E3 		orr	r1,r0, #ABORTMODE
 107 005c 01F02FE1 		msr	cpsr_cxsf, r1
 108 0060 D4D49FE5 		ldr	sp, =AbortStack
 109              	
 110              	   // Inicializamos la pila del modo IRQ
 111 0064 1F00C0E3 		bic	r0,r0, #MODEMASK
 112 0068 121080E3 		orr	r1,r0, #IRQMODE
 113 006c 01F02FE1 		msr	cpsr_cxsf, r1
 114 0070 C8D49FE5 		ldr	sp, =IRQStack
 115              	
 116              	   // Inicializamos la pila del modo FIQ
 117 0074 1F00C0E3 		bic	r0,r0, #MODEMASK
 118 0078 111080E3 		orr	r1,r0, #FIQMODE
 119 007c 01F02FE1 		msr	cpsr_cxsf, r1
 120 0080 BCD49FE5 		ldr	sp, =FIQStack
 121              	
 122              	   // Inicializamos la pila del modo SVC
 123 0084 1F00C0E3 	   bic	    r0,r0, #MODEMASK
 124 0088 131080E3 	   orr	    r1,r0, #SVCMODE
 125 008c 01F02FE1 	   msr	    cpsr_cxsf, r1
 126 0090 B0D49FE5 	   ldr	    sp, =SVCStack
 127              	    
 128              		/*Fin TAREA 1a*/
 129 0094 0EF0A0E1 	    mov pc, lr
 130              	
 131              	
 132              	//  Debemos comprobar la fuente de la interrupcion.
 133              	// Para ello habra que mirar en (INTOND o I_ISPR)??? y EXTINTPND
 134              	ISR_IRQ:
 135              		/*TAREA 2 definir la rutina ISR_IRQ*/
 136              		/*El alumno/a debe implementar esta rutina, que comprobara si se ha pulsado un boton, y si saltará
 137              		/*Ayuda: No olvideis que esta rutina debe cargar en PC la direccion de retorno al terminar*/
 138              		/*Ayuda: Los registros I_ISPR y EXTINTPND nos proporcionan informacion de las interrupciones pendi
 139              	
 140              		/*Debe preservar los registros arquitectónicos r0-r12*/
 141              	
 142              		/* prólogo */
 143 0098 01402DE9 		push {r0,lr} @ Basta con apilar los registros modificados
 144              			@ INCLUYENDO r0-r3 si se modifican
 145              	
 146              	
 147              		/* cuerpo de la rutina */
 148 009c A8049FE5 		ldr r0, =I_ISPR
 149              		// El ISPR solo indica una. Sirven ambos.
 150 00a0 000090E5 		ldr r0, [r0]
 151              		//Como en esta interrumpen solo
 152              		//los botones nos basta comprobar
 153              		//Que hay algún bit encendido
 154 00a4 000050E3 		cmp r0, #0
 155 00a8 0500000A 		beq epilogo
 156 00ac 9C049FE5 		ldr r0,=EXTINTPND
 157 00b0 000090E5 		ldr r0,[r0]
 158 00b4 0C0000E2 		and r0,r0,#12
 159 00b8 000050E3 		cmp r0,#0
 160 00bc 0000000A 		beq epilogo
 161 00c0 FEFFFFEB 		bl DoDetecta
 162              		/* epílogo */
 163              	
 164              	epilogo:
 165 00c4 0140BDE8 		pop {r0,lr} @ restauramos contexto y retornamos
 166 00c8 04F05EE2 		subs pc,lr,#4 @ La constante a restar depende de la excepción
 167              	
 168              	
 169              		/*Fin TAREA 2*/
 170              	
 171              	InitISR:
 172              	    /* Código de la primera parte */
 173              		/*TAREA 1b*/
 174              		/*El alumno/a debe definir la tabla de direcciones de rutinas*/
 175              		/*Ayuda: las entradas de la tabla son HandleUndef,HandleDabort, HandlePabort, HandleIRQ, HandleSWI
 176              		
 177 00cc 80049FE5 		ldr r0,=ISR_Undef
 178 00d0 80149FE5 		ldr r1,=HandleUndef
 179 00d4 000081E5 		str r0,[r1]
 180              	
 181 00d8 7C049FE5 		ldr r0,=ISR_Dabort
 182 00dc 7C149FE5 		ldr r1,=HandleDabort
 183 00e0 000081E5 		str r0,[r1]
 184              	
 185 00e4 78049FE5 		ldr r0,=ISR_Pabort
 186 00e8 78149FE5 		ldr r1,=HandlePabort
 187 00ec 000081E5 		str r0,[r1]
 188              	
 189 00f0 74049FE5 		ldr r0,=ISR_SWI
 190 00f4 74149FE5 		ldr r1,=HandleSWI
 191 00f8 000081E5 		str r0,[r1]
 192              	
 193 00fc 70049FE5 		ldr r0,=ISR_FIQ
 194 0100 70149FE5 		ldr r1,=HandleFIQ
 195 0104 000081E5 		str r0,[r1]
 196              	
 197 0108 6C049FE5 		ldr r0,=ISR_IRQ
 198 010c 6C149FE5 		ldr r1,=HandleIRQ
 199 0110 000081E5 		str r0,[r1]
 200              	
 201              		/*fin TAREA 1b*/
 202 0114 0EF0A0E1 		mov pc,lr
 203              	
 204              	
 205              	
 206              	DoSWI:
 207 0118 000000EF 		swi #0
 208 011c 0EF0A0E1 		mov pc,lr
 209              	
 210              	DoUndef:
 211 0120 100000E6 		.word 0xE6000010
 212 0124 0EF0A0E1 		mov pc,lr
 213              	
 214              	DoDabort:
 215 0128 54049FE5 		ldr r0,=0x0a333333
 216 012c 000080E5 		str r0,[r0]
 217 0130 0EF0A0E1 		mov pc,lr
 218              	
 219              	
 220              	screen:
 221 0134 00000000 		.space 1024
 221      00000000 
 221      00000000 
 221      00000000 
 221      00000000 
 222              	
 223 0534 00F07F0C 	.end
 223      00F27F0C 
 223      00F37F0C 
 223      00F47F0C 
 223      00F57F0C 
DEFINED SYMBOLS
         ../init.asm:55     .text:00000000 start
                            *ABS*:0c7fff00 _ISR_STARTADDRESS
         ../init.asm:210    .text:00000120 DoUndef
         ../init.asm:206    .text:00000118 DoSWI
         ../init.asm:214    .text:00000128 DoDabort
         ../init.asm:220    .text:00000134 screen
         ../init.asm:20     *ABS*:0c7ff000 UserStack
         ../init.asm:21     *ABS*:0c7ff100 SVCStack
         ../init.asm:22     *ABS*:0c7ff200 UndefStack
         ../init.asm:23     *ABS*:0c7ff300 AbortStack
         ../init.asm:24     *ABS*:0c7ff400 IRQStack
         ../init.asm:25     *ABS*:0c7ff500 FIQStack
         ../init.asm:27     *ABS*:0c7fff00 HandleReset
         ../init.asm:28     *ABS*:0c7fff04 HandleUndef
         ../init.asm:29     *ABS*:0c7fff08 HandleSWI
         ../init.asm:30     *ABS*:0c7fff0c HandlePabort
         ../init.asm:31     *ABS*:0c7fff10 HandleDabort
         ../init.asm:32     *ABS*:0c7fff14 HandleReserved
         ../init.asm:33     *ABS*:0c7fff18 HandleIRQ
         ../init.asm:34     *ABS*:0c7fff1c HandleFIQ
         ../init.asm:38     *ABS*:00000010 USERMODE
         ../init.asm:39     *ABS*:00000011 FIQMODE
         ../init.asm:40     *ABS*:00000012 IRQMODE
         ../init.asm:41     *ABS*:00000013 SVCMODE
         ../init.asm:42     *ABS*:00000017 ABORTMODE
         ../init.asm:43     *ABS*:0000001b UNDEFMODE
         ../init.asm:44     *ABS*:0000001f MODEMASK
         ../init.asm:46     *ABS*:000000c0 NOINT
         ../init.asm:47     *ABS*:00000040 IRQ_MODE
         ../init.asm:48     *ABS*:00000080 FIQ_MODE
         ../init.asm:50     *ABS*:01e00020 I_ISPR
         ../init.asm:51     *ABS*:01d20054 EXTINTPND
         ../init.asm:58     .text:00000000 $a
         ../init.asm:89     .text:00000040 InitStacks
         ../init.asm:171    .text:000000cc InitISR
         ../init.asm:134    .text:00000098 ISR_IRQ
         ../init.asm:164    .text:000000c4 epilogo
         ../init.asm:211    .text:00000120 $d
         ../init.asm:212    .text:00000124 $a
         ../init.asm:221    .text:00000134 $d
                   .debug_aranges:0000000c $d

UNDEFINED SYMBOLS
main
DoDetecta
ISR_Undef
ISR_Dabort
ISR_Pabort
ISR_SWI
ISR_FIQ
